--- arch/arm/mach-rk3188/autosmp.c
+++ arch/arm/mach-rk3188/autosmp.c
@@ -1,131 +1,81 @@
 /*
- * AutoSMP Hotplug Driver
+ * arch/arm/kernel/autosmp.c
  *
- * Automatically hotplug/unplug multiple CPU cores
- * based on cpu load and suspend state.
+ * automatically hotplug/unplug multiple cpu cores
+ * based on cpu load and suspend state
  *
- * Based on the msm_mpdecision code by
+ * based on the msm_mpdecision code by
  * Copyright (c) 2012-2013, Dennis Rassmann <showp1984@gmail.com>
  *
+ * Copyright (C) 2013-2014, Rauf Gungor, http://github.com/mrg666
+ * rewrite to simplify and optimize, Jul. 2013, http://goo.gl/cdGw6x
+ * optimize more, generalize for n cores, Sep. 2013, http://goo.gl/448qBz
+ * generalize for all arch, rename as autosmp, Dec. 2013, http://goo.gl/x5oyhy
+ *
  * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License version 2 as
- * published by the Free Software Foundation.
- *
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version. For more details, see the GNU
+ * General Public License included with the Linux kernel or available
+ * at www.gnu.org/licenses
  */
 
 #include <linux/moduleparam.h>
+#include <linux/earlysuspend.h>
 #include <linux/cpufreq.h>
 #include <linux/workqueue.h>
 #include <linux/cpu.h>
 #include <linux/cpumask.h>
-#include <linux/slab.h>
 #include <linux/hrtimer.h>
-#include <linux/input.h>
-#ifdef CONFIG_STATE_NOTIFIER
-#include <linux/state_notifier.h>
-#endif
 A
 #define DEBUG 0
 
-#define ASMP_TAG			"AutoSMP:"
-#define ASMP_ENABLED			false
-#define DEFAULT_BOOST_LOCK_DUR		500 * 1000L
-#define DEFAULT_NR_CPUS_BOOSTED		2
-#define DEFAULT_UPDATE_RATE		30
-#define MIN_INPUT_INTERVAL		150 * 1000L
-#define DEFAULT_MIN_BOOST_FREQ		1728000
+#define ASMP_TAG "AutoSMP: "
+#define ASMP_STARTDELAY 20000
 
-#if DEBUG
 struct asmp_cpudata_t {
 	long long unsigned int times_hotplugged;
 };
-static DEFINE_PER_CPU(struct asmp_cpudata_t, asmp_cpudata);
-#endif
 
 static struct delayed_work asmp_work;
 static struct workqueue_struct *asmp_workq;
-static bool enabled_switch = ASMP_ENABLED;
+static DEFINE_PER_CPU(struct asmp_cpudata_t, asmp_cpudata);
 
 static struct asmp_param_struct {
 	unsigned int delay;
+	bool scroff_single_core;
 	unsigned int max_cpus;
 	unsigned int min_cpus;
 	unsigned int cpufreq_up;
 	unsigned int cpufreq_down;
 	unsigned int cycle_up;
 	unsigned int cycle_down;
-	unsigned int cpus_boosted;
-	unsigned int min_boost_freq;
-	bool enabled;
-	u64 boost_lock_dur;
-#ifdef CONFIG_STATE_NOTIFIER
-	struct notifier_block notif;
-#endif
 } asmp_param = {
-	.delay = DEFAULT_UPDATE_RATE,
-	.max_cpus = NR_CPUS,
+	.delay = 100,
+	.scroff_single_core = true,
+	.max_cpus = CONFIG_NR_CPUS,
 	.min_cpus = 1,
-	.cpufreq_up = 95,
-	.cpufreq_down = 80,
+	.cpufreq_up = 1200000, //kHz
+	.cpufreq_down = 1000000, //kHz
 	.cycle_up = 1,
-	.cycle_down = 1,
-	.min_boost_freq = DEFAULT_MIN_BOOST_FREQ,
-	.cpus_boosted = DEFAULT_NR_CPUS_BOOSTED,
-	.enabled = ASMP_ENABLED,
-	.boost_lock_dur = DEFAULT_BOOST_LOCK_DUR,
+	.cycle_down = 3,
 };
 
-static u64 last_boost_time;
 static unsigned int cycle = 0;
+static int enabled __read_mostly = 1;
 
-/*
- * suspend mode, if set = 1 hotplug will sleep,
- * if set = 0, then hoplug will be active all the time.
- */
-static unsigned int hotplug_suspend = 1;
-module_param_named(hotplug_suspend, hotplug_suspend, uint, 0644);
-
-static void reschedule_hotplug_work(void)
-{
-	queue_delayed_work(asmp_workq, &asmp_work,
-			msecs_to_jiffies(asmp_param.delay));
-}
-
-static void max_min_check(void)
-{
-	asmp_param.max_cpus = max((unsigned int)1, asmp_param.max_cpus);
-	asmp_param.min_cpus = max((unsigned int)1, asmp_param.min_cpus);
-
-	if (asmp_param.max_cpus > NR_CPUS)
-		asmp_param.max_cpus = NR_CPUS;
-	if (asmp_param.min_cpus > asmp_param.max_cpus)
-		asmp_param.min_cpus = asmp_param.max_cpus;
-}
-
-static void __cpuinit asmp_work_fn(struct work_struct *work)
-{
+static void __cpuinit asmp_work_fn(struct work_struct *work) {
 	unsigned int cpu = 0, slow_cpu = 0;
 	unsigned int rate, cpu0_rate, slow_rate = UINT_MAX, fast_rate;
-	unsigned int max_rate, up_rate, down_rate;
-	unsigned int nr_cpu_online;
-	unsigned int min_boost_freq = asmp_param.min_boost_freq;
-	u64 now;
-	
-	if (!asmp_param.enabled)
-		return;
-
-	/* get maximum possible freq for cpu0 and
-	   calculate up/down limits */
-	max_rate  = cpufreq_quick_get_max(cpu);
-	up_rate   = (max_rate / 100) * asmp_param.cpufreq_up;
-	down_rate = (max_rate / 100) * asmp_param.cpufreq_down;
-
-	/* find current max and min cpu freq to estimate load */
+	int nr_cpu_online;
+
+	cycle++;
+	/* find max and min cpu freq to estimate load */
+	get_online_cpus();
 	nr_cpu_online = num_online_cpus();
 	cpu0_rate = cpufreq_quick_get(cpu);
 	fast_rate = cpu0_rate;
-
-	for_each_online_cpu(cpu) {
+	for_each_online_cpu(cpu)
 		if (cpu) {
 			rate = cpufreq_quick_get(cpu);
 			if (rate <= slow_rate) {
